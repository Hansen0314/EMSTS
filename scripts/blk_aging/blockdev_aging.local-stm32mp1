#!/bin/bash
# tary, 2018-08-07

source ~/.bashrc
source /opt/EMSTS/scripts/bbb/aux-funcs 

LED0="/sys/class/leds/blue/brightness"
LED1="/sys/class/leds/usr0/brightness"
LED2="/sys/class/leds/usr1/brightness"
LED3="/sys/class/leds/usr2/brightness"

echo none > /sys/class/leds/blue/trigger
echo none > /sys/class/leds/usr0/trigger
echo none > /sys/class/leds/usr1/trigger
echo none > /sys/class/leds/usr2/trigger

listA=" F5 D6 B10    C0  E7    E8 F6 F3    D14     E15 I2 C3"
listB="A14    D4 E10        F9 H7 H6    A3 E14 D15 B12 E9"

group_letters="ABCDEFGHIZ"

function gpiodset() {
	local io="$1"
	local v="$2"
	local grp_c=${io:0:1} grp
	local offset=${io:1}

	grp=$(( $(expr index "$group_letters" $grp_c) - 1 ))
	# (( grp -- ))

	cmds="gpioset gpiochip$grp $offset=$v"
	echo $cmds
	$cmds
	r=$?

	return $r
}

function local_initial() {
	echo "##### $0 Starting up #####"

	killall sleep
	sleep 1

	# initial cat for can & rs485
	killall cat

	# gpioset gpiochip6 3=1
	# gpioset gpiochip5 8=1
	for i in $listA; do
		gpiodset $i 0;
	done
	sleep 0.3

	for i in $listB; do
		gpiodset $i 0
	done

	while true; do
		for i in $LED0; do
			echo 0 > $i
		done
		sleep 1
		for i in $LED0; do
			echo 1 > $i
		done
		sleep 1
	done &
}

function local_loop() {
	local rv

	rv=0
	msg=`ping -c 1 $(get_gateway)`; r=$?
	if [ $r -ne 0 ]; then
		echo PING:$msg
		rv=$(( rv + 1 ))
		echo 0 > $LED3
	else
		echo 1 > $LED3
	fi

	msg=`storage /media/1 /dev/sda /dev/sda1 2>/dev/null`; r=$?
	if [ $r -ne 0 ]; then
		echo UDISK1:$msg
		rv=$(( rv + 1 ))
		echo 0 > $LED2
	else
		echo 1 > $LED2
	fi

	msg=`storage /media/2 /dev/sdb /dev/sdb1 2>/dev/null`; r=$?
	if [ $r -ne 0 ]; then
		echo UDISK2:$msg
		rv=$(( rv + 1 ))
		echo 0 > $LED1
	else
		echo 1 > $LED1
	fi

	msg=`storage /media/3 /dev/mmcblk0p5 2>/dev/null`; r=$?
	if [ $r -ne 0 ]; then
		echo SDCARD:$msg
		rv=$(( rv + 1 ))
	fi

	ap_count=$(iw wlan0 scan | egrep "^BSS|signal:" | wc -l)
	msg=`test "$ap_count" -ne 0`; r=$?
	if [ $r -ne 0 ]; then
		echo WLAN:$msg
		rv=$(( rv + 1 ))
	fi

	return $rv
}

function local_intr() {
	local logf

	logf=$1
	logbf=$(basename $logf)

	echo DATE:`date`
	LAST_PWD=$OLDPWD

: <<'comment-lines-end'
	# commit logs
	cd /opt/logs
	git pull origin

	cp $logf $logbf
	git add $logbf
	git commit -m "`date`: $logbf"
	git push origin

	cd $LAST_PWD
comment-lines-end
}

